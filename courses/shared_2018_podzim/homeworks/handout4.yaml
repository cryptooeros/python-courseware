homeworks:

- section:
    markdown: |
      Nezapomeň: Když něco funguje, přidej to do Gitu!
      Pokud materiály procházíš v jiném pořadí než my na srazech a Git ještě neznáš, můžeš všechny poznámky o Gitu ignorovat.
      Jinak si na tuto sadu projektů udělej zvláštní repozitář.

      Trocha experimentování. Zkus se zamyslet, jestli jsi „dobře” pochopila otázku.

- id: dla9isb5umsn
  markdown: |
    Co se stane, když tělo nějaké funkce necháš prázdné?

- id: qbeyineivepe
  markdown: |
    Co se stane, když necháš prázdné tělo cyklu?

- section:
    markdown: |
      Procvičení funkcí. Jestli jsi pythonní funkce nepsala už před kurzem, tak první z těchto projektů určitě udělej. Druhý jen pokud máš ráda geometrii :)

- id: hlyvhtcr1cn8
  markdown: |
    Napiš funkci, která vykreslí domeček dané velikosti.
    _(t.j. velikost se zadá argumentem)_

    <img src="/static/tasks/handout4_images/02_domecky.png" alt="domečky" style="max-width: 100%; max-height: 80px">

- id: hwa8m4fzynzv
  markdown: |
    Máš-li ráda geometrii*, můžeš zkusit dávat domečkové funkci dva argumenty:
    šířku a výšku.
    Je potřeba si vzpomenout na Pythagorovu větu a funkci tangens.
    Pozor, funkce `tan` vrací výsletek v radiánech;
    je potřeba ho převést na stupně (`from math import degrees`).

    <img src="/static/tasks/handout4_images/03_domecky.png" alt="domečky" style="max-width: 100%; max-height: 80px">

    \* t.j. jestli nemáš ráda geometrii, tak tenhle projekt přeskoč

- section:
    markdown: |
      Procvičení programování.
      Často je jednoduché něco napsat, ale dotažení do konce může být časově náročné.
      _Nemáš-li čas, zkus se aspoň zamyslet, jak bys projekt vyřešila._

- id: njnxoiomixg5
  markdown: |
    Změň program Kámen, Nůžky, Papír tak, aby opakoval hru dokud
    uživatel nezadá `konec`.

- id: zm3gwjtwxpff
  markdown: |
    Změň funkci `ano_nebo_ne` tak,
    aby se místo `ano` se dalo použít i `a`,
    místo `ne` i `n`
    a aby se nebral ohled na velikost písmen a mezery před/za odpovědí.

    _Textům jako `možná` nebo `no tak určitě` by počítač dál neměl rozumět._

- section:
    markdown: |
      Sada zajímavých (snad) prográmků, které bys teď měla být schopná napsat. Nemáš-li čas, zatím je přeskoč.

- id: ixf1tkbvcotf
  markdown: |
    Napiš program, který se zeptá na příjmení uživatelky/uživatele
    a zkusí podle něj uhodnout její/jeho pohlaví.

- id: vio5xjw91uud
  markdown: |
    Najdi na internetu text své oblíbené písně, zkopíruj si ho do řetězce
    a zjisti, kolikrát je v něm použito písmeno K.

- id: mtzwbnugdwri
  markdown: |
    Napiš program, který simuluje tuto hru:

    První hráč hází kostkou
    _(t.j. vybírají se náhodná čísla od 1 do 6)_,
    dokud nepadne šestka.
    Potom hází další hráč, dokud nepadne šestka i jemu.
    Potom hází hráč třetí a nakonec čtvrtý.
    Vyhrává ten, kdo na hození šestky potřeboval nejvíc hodů.
    (V případě shody vyhraje ten, kdo házel dřív.)

    Program by měl vypisovat všechny hody a nakonec napsat, kdo vyhrál.

- section:
    markdown: |
      Nakonec trošku delší projekt.
      Budeme na něm stavět dál; nedokončíš-li ho teď, budeš ho muset dodělat před příští sadou projektů.

      <blockquote>
      1-D piškvorky se hrají na řádku s dvaceti políčky.
      Hráči střídavě přidávají kolečka (`o`) a křížky (`x`),
      třeba:
      <pre>
      1. kolo: -------<span style='color: red'>x</span>------------
      2. kolo: -------x--<span style='color: red'>o</span>---------
      3. kolo: -------x<span style='color: red'>x</span>-o---------
      4. kolo: -------xx<span style='color: red'>o</span>o---------
      5. kolo: ------<span style='color: red'>x</span>xxoo---------
      </pre>
      Hráč, která dá tři své symboly vedle sebe, vyhrál.
      </blockquote>

- id: mgbgypp7hcfh
  mandatory: true
  markdown: |
    Napiš funkci `vyhodnot`, která dostane řetězec
    s herním polem 1-D piškvorek
    a vrátí jednoznakový řetězec podle stavu hry:

    - `"x"` – Vyhrál hráč s křížky (pole obsahuje `"xxx"`)
    - `"o"` – Vyhrál hráč s kolečky (pole obsahuje `"ooo"`)
    - `"!"` – Remíza (pole neobsahuje `"-"`, a nikdo nevyhrál)
    - `"-"` – Ani jedna ze situací výše (t.j. hra ještě neskončila)

- id: hk28awcuewlo
  mandatory: true
  markdown: |
    Napiš funkci `tah`, která dostane řetězec s herním polem,
    číslo políčka (0-19), a symbol (`x` nebo `o`)
    a vrátí herní pole _(t.j. řetězec)_ s daným symbolem umístěným na danou pozici.

    Hlavička funkce by tedy měla vypadat nějak takhle:

    ```
    def tah(pole, cislo_policka, symbol):
        "Vrátí herní pole s daným symbolem umístěným na danou pozici"
        ...
    ```

    _Můžeš využít nějakou funkci, kterou jsme napsaly už na sraze?_

- id: awlph68yujyd
  markdown: |
    Napiš funkci `tah_hrace`, která dostane řetězec s herním polem,
    zeptá se hráče, na kterou pozici chce hrát, a vrátí herní pole
    se zaznamenaným tahem hráče.
    Funkce by měla odmítnout záporná nebo příliš velká čísla
    a tahy na obsazená políčka.
    Pokud uživatel zadá špatný vstup, funkce mu vynadá a zeptá se znova.

- id: qlahxeucwc69
  markdown: |
    Napiš funkci `tah_pocitace`, která dostane řetězec s herním polem,
    vybere pozici, na kterou hrát, a vrátí herní pole
    se zaznamenaným tahem počítače.

    Použij jednoduchou náhodnou „strategii”:

    1. Vyber číslo od 0 do 19.
    2. Pokud je dané políčko volné, hrej na něj.
    3. Pokud ne, opakuj od bodu 1.

    Hlavička funkce by tedy měla vypadat nějak takhle:

    ```
    def tah_pocitace(pole):
        "Vrátí herní pole se zaznamenaným tahem počítače"
        ...
    ```

- id: fc0f4tr7zvqp
  markdown: |
    Napiš funkci `piskvorky1d`, která vytvoří řetězec s herním polem
    a střídavě volá funkce `tah_hrace` a `tah_pocitace`,
    dokud někdo nevyhraje nebo nedojde k remíze.

    Nezapomeň kontrolovat stav hry po každém tahu.

- section:
    markdown: |
      Poslední projekt je nepovinný, ale, jak to u podobných projektů bývá, můžeš na něj dostat zpětnou vazbu.
      Doporučuju toho využít!

- id: jfkcmqd_sm2o
  markdown: |
    Zvládneš pro počítač naprogramovat lepší strategii?
    Třeba aby se snažil hrát vedle svých existujících symbolů
    nebo aby bránil protihráčovi?

    Stačí jen docela malé vylepšení!
